//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Northwind.Store.Data
{
    using System;
    using System.Linq;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using Northwind.Store.Model;
    
    public partial class NorthwindEntities : DbContext
    {
    	public NorthwindEntities()
    		: base("name=NorthwindEntities")
    	{
    		// Cuando un objeto es creado como parte de una consulta su estado se define como non cambiado
    		((IObjectContextAdapter)this).ObjectContext.ObjectMaterialized += (sender, args) =>
    		{
    			var entity = args.Entity as IObjectWithState;
    
    			if (entity != null)
    			{
    				entity.State = State.Unchanged;
    			}
    		};
    
    #if DEBUG
    		// https://msdn.microsoft.com/en-us/data/dn469464.aspx
    		this.Database.Log = (string data) => 
    		{
    			System.Diagnostics.Debug.WriteLine(data);
    		};	
    #endif
    	}
    
    	protected override void OnModelCreating(DbModelBuilder modelBuilder)
    	{
    		throw new UnintentionalCodeFirstException();
    	}
    
    	public virtual DbSet<Category> Categories { get; set; }
    	public virtual DbSet<CustomerDemographic> CustomerDemographics { get; set; }
    	public virtual DbSet<Customer> Customers { get; set; }
    	public virtual DbSet<Employee> Employees { get; set; }
    	public virtual DbSet<OrderDetail> OrderDetails { get; set; }
    	public virtual DbSet<Order> Orders { get; set; }
    	public virtual DbSet<Product> Products { get; set; }
    	public virtual DbSet<Region> Regions { get; set; }
    	public virtual DbSet<Shipper> Shippers { get; set; }
    	public virtual DbSet<Supplier> Suppliers { get; set; }
    	public virtual DbSet<Territory> Territories { get; set; }
    	
    	#region Aplicación de cambios general
    
    	/// <summary>
    	/// Aplicación de cambios en la fuente de datos.
    	/// </summary>
    	/// <typeparam name="TEntity"></typeparam>
    	/// <param name="root"></param>
    	/// <returns></returns>
    	public void ApplyChanges<TEntity>(TEntity root) where TEntity : class, IObjectWithState
    	{
    			Set<TEntity>().Add(root);
    			CheckForEntitiesWithoutStateInterface(this);
    			foreach (var entry in ChangeTracker.Entries<IObjectWithState>())
    			{
    				IObjectWithState stateInfo = entry.Entity;
    				if (stateInfo.State == State.Modified)
    				{
    					entry.State = EntityState.Unchanged;
    					foreach (var property in stateInfo.ModifiedProperties)
    					{
    						entry.Property(property).IsModified = true;
    					}
    				}
    				else
    				{
    					entry.State = ConvertState(stateInfo.State);
    				}
    			}
    			int affected = SaveChanges();
    	}
    
    	/// <summary>
    	/// Convierte el estado entre el estado personalizado y el estado del Entity Framewok
    	/// </summary>
    	/// <param name="state"></param>
    	/// <returns></returns>
    	EntityState ConvertState(State state)
    	{
    		switch (state)
    		{
    			case State.Added:
    				return EntityState.Added;
    			case State.Modified:
    				return EntityState.Modified;
    			case State.Deleted:
    				return EntityState.Deleted;
    			default:
    				return EntityState.Unchanged;
    		}
    	}
    
    	/// <summary>
    	/// Se confirma que todos los objetos del modelo implementan la interface IObjectWithState
    	/// </summary>
    	/// <param name="context"></param>
    	void CheckForEntitiesWithoutStateInterface(NorthwindEntities context)
    	{
    		var entitiesWithoutState =
    		from e in context.ChangeTracker.Entries()
    		where !(e.Entity is IObjectWithState)
    		select e;
    		if (entitiesWithoutState.Any())
    		{
    			throw new NotSupportedException("Todas la entidades deben implementar IObjectWithState.");
    		}
    	}
    	#endregion
    }
}
